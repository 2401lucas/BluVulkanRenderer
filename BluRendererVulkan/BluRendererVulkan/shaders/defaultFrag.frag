#version 450#extension GL_EXT_nonuniform_qualifier : enablelayout(set = 1, binding = 0) uniform sampler2D[] textureSamplers;layout(push_constant) uniform PushConstantData {    vec4 index;} pushConsts;layout(location = 0) in vec3 fragColour;layout(location = 1) in vec3 fragNormal;layout(location = 2) in vec3 fragPosition;layout(location = 3) in vec2 fragTexCoord;layout(location = 0) out vec4 outColour;layout(set = 0, binding = 1) uniform  GPUSceneData {    vec4 cameraPosition; // w is for exponent	vec4 fogDistances; //x for min, y for max, zw unused.	vec4 ambientColor; //XYZ for lighting, W for Intensity	vec4 sunlightDirection; //w for sun power	vec4 sunlightColor;} sceneData;//TODO: Convert to doing light calculations in view spacevoid main() {	vec3 norm = normalize(fragNormal);	vec3 ambLighting = sceneData.ambientColor.xyz * sceneData.ambientColor.w;	vec3 directionalLighting = max(dot(norm, sceneData.sunlightDirection.xyz), 0.0) * sceneData.sunlightColor.xyz * sceneData.sunlightDirection.w; 	outColour = texture(textureSamplers[int(pushConsts.index.x)], fragTexCoord.xy) * vec4(ambLighting + directionalLighting, 1.0);}